# Angular Component
snippet ng2-component
  import { Component, OnInit } from '@angular/core';

  @Component({
  	moduleId: module.id,
  	selector: '${1:selector}',
  	templateUrl: '${2:name}.component.html'
  })
  export class ${3:ComponentName}Component implements OnInit {
  	constructor() { }

  	ngOnInit() { }
  ${4}
  }
endsnippet


# Angular Service
snippet ng2-service
  import { Injectable } from '@angular/core';

  @Injectable()
  export class ${1:ServiceName}Service {
  ${2}
  	constructor() { }

  }
endsnippet

# Angular Pipe
snippet ng2-pipe
  import { Pipe, PipeTransform } from '@angular/core';

  @Pipe({
  	name: '${1:name}'
  })

  export class ${2:PipeName}Pipe implements PipeTransform {
  	transform(value: any, args: any[]): any {
  		${3}
  	}
  }
endsnippet

# Angular Routes
snippet ng2-routes
  @Routes([
  	{ path: '/${1:path}', component: ${2:Component} }${3}
  ])
endsnippet
# Angular RouteDefinition
snippet ng2-route-path
  { path: '/${1:path}', component: ${2:Component} }${3}
endsnippet


# Http.get
snippet ng2-http-get
  return this.http.get('${1:url}')
  	.map((res: Response) => res.json()${2});
endsnippet

# Subscribe
snippet ng2-subscribe
  this.${1:service}.${2:function}
  	.subscribe(${3:arg} => this.${4:property} = ${5:arg});
  ${6}
endsnippet

# Angular Bootstrapping
snippet ng2-bootstrap
  import { enableProdMode } from '@angular/core';
  import { bootstrap } from '@angular/platform-browser-dynamic';

  import { ${1:AppComponent} } from './${2:name}.component';

  // enableProdMode();

  bootstrap(${3:AppComponent})
  	.then(success => console.log(`Bootstrap success`))
  	.catch(error => console.log(error));
  ${4}
endsnippet
# AppComponent
snippet ng2-component-root
  import { Component } from '@angular/core';
  import { HTTP_PROVIDERS } from '@angular/http';
  import { Routes, ROUTER_DIRECTIVES, ROUTER_PROVIDERS } from '@angular/router';
  import 'rxjs/Rx'; // load the full rxjs

  @Component({
  	moduleId: module.id,
  	selector: '${1:selector}',
  	templateUrl: '${2:name}.component.html',
  	directives: [ROUTER_DIRECTIVES],
  	providers: [
  	  HTTP_PROVIDERS,
  	  ROUTER_PROVIDERS
  	]
  })
  @Routes([
  	${3}
  ])
  export class AppComponent {}
endsnippet

snippet /// "import reference" b
/// <reference path='${0: file}' />
endsnippet

snippet ctor "constructor" b
constructor(${0}) {
	${1:// code}
}
endsnippet

snippet cls "class .." b
class ${1:ClassName}${2: extends ${3:ParentClass}} {
	${4: constructor(${5:args}) {
    ${6://code...}
  }}
}
endsnippet

snippet itf "interface .." b
interface ${1:InterfaceName}${2: extends ${3:Parent}} {
	${4://code...}
}
endsnippet

snippet import "imports a module" b
import $1 = require('$2')
endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet fn "function literal (fn)"
function (${1:argument}) {
	${VISUAL}$0
}
endsnippet

snippet af "arrow function (af)"
(${1:argument}) => {
	${VISUAL}$0
}
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
	${2://code}
}
else {
	${3://code}
}
endsnippet

snippet cl "console.log" b
console.log(${1:"${2:value}"});
endsnippet

snippet meth "class/object method" b
${2:methodName}(${3:args}): ${4:void} {
		${0://code}
}
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet dclm "declare module" b
declare module ${1:name} {
	${VISUAL}$0
}
endsnippet
